    // Arrays (and matrices, which are just multi-dimensional arrays) are static structures
    // because their size is fixed at the time of declaration and cannot grow dynamically.
    //In a dynamic structure you can increase or decrease their size
    /*
        Dynamically allocated elements (e.g., in linked lists) are not stored
        in contiguous memory like arrays; they can be scattered throughout memory.
        Don't need one large contiguous block of free memory, each element can be 
        stored separately and linked with pointers.
    */
    /* Some common data structures:
        - Stack
        - Queue
        - Linked List
        - Tree

        They can often be implemented using dynamic memory (e.g., with pointers),
        but the main difference between them is their purpose and how they
        organize and access data.
    */
   //Stack have 2 operations, push (insert element on top) and (pop remove element on top)
   //It follows the LIFO (Last In, First Out) principle
   //Each node (element) in the stack point to the underneath node
   /*
        To pop a node:
        1. Use an auxiliary pointer to store the current top node.
        2. Move the stack's top pointer to the next node (the one underneath).
        3. Free the old top node from memory.
   */
   /*Queue is similar to a Stack, you can insert and remove elements from it
        It follows the FIFO (First In, First Out) principle
        A Priority Queue works like a regular queue, but some elements 
        have priority. If a priority element is inserted, it is placed 
        ahead of the non-priority elements.
   */
   //What is the difference between a linked list, a queue and a stack?
   /*
        A Linked List allows insertion/removal at any position. 
        Variants: doubly linked (each node points to prev/next) 
        and circular (last node points back to first).
        A Stack restricts access to LIFO (last-in, first-out): 
        you can only push to or pop from the top.
        A Queue restricts access to FIFO (first-in, first-out): 
        you enqueue at the back and dequeue from the front.
   */
   //Tree: data structure used to ororganize and search data
   /*
     There are many kinds of trees for differents types of problems.
     Examples:
          - Red-Black Tree
          - B-Tree
          - AVL Tree
          - Binary Tree
     *What is a binary tree?
          A binary tree start from root (first element) and then
          split in 2 branches. Each branch can also split in 2, and 
          so on. A node with no children (braches) is called a "leaf".
          In a binary tree, elements that are smaller than the root
          are placed on the left, and the greater than the root on
          the right.
   */
   